/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bridge = void 0;
var ethers_1 = require("ethers");
var l1Bridge_1 = require("./l1Bridge");
var l2Bridge_1 = require("./l2Bridge");
var bridge_helpers_1 = require("./bridge_helpers");
var Zero = ethers_1.constants.Zero;
var Bridge = /** @class */ (function (_super) {
    __extends(Bridge, _super);
    function Bridge(erc20BridgeAddress, arbERC20BridgeAddress, ethSigner, arbSigner) {
        var _this = _super.call(this, arbERC20BridgeAddress, arbSigner) || this;
        _this.l1Bridge = new l1Bridge_1.L1Bridge(erc20BridgeAddress, ethSigner);
        return _this;
    }
    Bridge.prototype.updateAllBalances = function () {
        this.updateAllTokens();
        this.getAndUpdateL1EthBalance();
        this.getAndUpdateL2EthBalance();
    };
    Bridge.prototype.updateAllTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var l1Tokens, l2Tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.l1Bridge.updateAllL1Tokens()];
                    case 1:
                        l1Tokens = _a.sent();
                        return [4 /*yield*/, this.updateAllL2Tokens()];
                    case 2:
                        l2Tokens = _a.sent();
                        return [2 /*return*/, { l1Tokens: l1Tokens, l2Tokens: l2Tokens }];
                }
            });
        });
    };
    Bridge.prototype.updateTokenData = function (erc20l1Address) {
        return __awaiter(this, void 0, void 0, function () {
            var l1Data, l2Data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAndUpdateL1TokenData(erc20l1Address)];
                    case 1:
                        l1Data = _a.sent();
                        return [4 /*yield*/, this.getAndUpdateL2TokenData(erc20l1Address)];
                    case 2:
                        l2Data = _a.sent();
                        return [2 /*return*/, { l1Data: l1Data, l2Data: l2Data }];
                }
            });
        });
    };
    Object.defineProperty(Bridge.prototype, "l1Tokens", {
        get: function () {
            return this.l1Bridge.l1Tokens;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bridge.prototype, "l1EthBalance", {
        get: function () {
            return this.l1Bridge.l1EthBalance;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bridge.prototype, "ethERC20Bridge", {
        get: function () {
            return this.l1Bridge.ethERC20Bridge;
        },
        enumerable: false,
        configurable: true
    });
    Bridge.prototype.approveToken = function (erc20L1Address, overrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.l1Bridge.approveToken(erc20L1Address, overrides)];
            });
        });
    };
    Bridge.prototype.depositETH = function (value, destinationAddress, maxGas, overrides) {
        if (maxGas === void 0) { maxGas = ethers_1.BigNumber.from(5000); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.l1Bridge.depositETH(value, destinationAddress, maxGas, overrides)];
            });
        });
    };
    Bridge.prototype.deposit = function (erc20L1Address, amount, maxGas, gasPriceBid, destinationAddress, overrides) {
        return __awaiter(this, void 0, void 0, function () {
            var maxSubmissionPrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTxnSubmissionPrice(Zero)];
                    case 1:
                        maxSubmissionPrice = (_a.sent())[0];
                        return [2 /*return*/, this.l1Bridge.deposit(erc20L1Address, amount, maxSubmissionPrice, maxGas, gasPriceBid, destinationAddress, overrides)];
                }
            });
        });
    };
    Bridge.prototype.getAndUpdateL1TokenData = function (erc20l1Address) {
        return this.l1Bridge.getAndUpdateL1TokenData(erc20l1Address);
    };
    Bridge.prototype.getAndUpdateL1EthBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.l1Bridge.getAndUpdateL1EthBalance()];
            });
        });
    };
    Bridge.prototype.getL2Transaction = function (l2TransactionHash) {
        return bridge_helpers_1.BridgeHelper.getL2Transaction(l2TransactionHash, this.l2Provider);
    };
    Bridge.prototype.getL1Transaction = function (l1TransactionHash) {
        return bridge_helpers_1.BridgeHelper.getL1Transaction(l1TransactionHash, this.l1Bridge.l1Provider);
    };
    Bridge.prototype.calculateL2TransactionHash = function (inboxSequenceNumber, l2ChainId) {
        return bridge_helpers_1.BridgeHelper.calculateL2RetryableTransactionHash(inboxSequenceNumber, l2ChainId || this.l2Provider);
    };
    Bridge.prototype.calculateL2RetryableTransactionHash = function (inboxSequenceNumber, l2ChainId) {
        return bridge_helpers_1.BridgeHelper.calculateL2RetryableTransactionHash(inboxSequenceNumber, l2ChainId || this.l2Provider);
    };
    Bridge.prototype.getInboxSeqNumFromContractTransaction = function (l2Transaction) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = bridge_helpers_1.BridgeHelper).getInboxSeqNumFromContractTransaction;
                        _c = [l2Transaction];
                        return [4 /*yield*/, this.l1Bridge.getInbox()];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([
                            // TODO: we don't need to actually make this query if random address fetches interface
                            (_d.sent()).address]))];
                }
            });
        });
    };
    Bridge.prototype.getBuddyDeployInL2Transaction = function (l2Transaction) {
        return bridge_helpers_1.BridgeHelper.getBuddyDeployInL2Transaction(l2Transaction);
    };
    Bridge.prototype.getWithdrawalsInL2Transaction = function (l2Transaction) {
        return bridge_helpers_1.BridgeHelper.getWithdrawalsInL2Transaction(l2Transaction, this.l2Provider);
    };
    Bridge.prototype.getDepositTokenEventData = function (l1Transaction) {
        return bridge_helpers_1.BridgeHelper.getDepositTokenEventData(l1Transaction, this.arbTokenBridge.address);
    };
    Bridge.prototype.triggerL2ToL1Transaction = function (batchNumber, indexInBatch, singleAttempt) {
        if (singleAttempt === void 0) { singleAttempt = false; }
        return __awaiter(this, void 0, void 0, function () {
            var inbox, bridgeAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.l1Bridge.getInbox()];
                    case 1:
                        inbox = _a.sent();
                        return [4 /*yield*/, inbox.bridge()];
                    case 2:
                        bridgeAddress = _a.sent();
                        return [2 /*return*/, bridge_helpers_1.BridgeHelper.triggerL2ToL1Transaction(batchNumber, indexInBatch, bridgeAddress, this.l2Provider, this.l1Bridge.l1Signer, singleAttempt)];
                }
            });
        });
    };
    Bridge.prototype.tryOutboxExecute = function (activeOutboxAddress, batchNumber, proof, path, l2Sender, l1Dest, l2Block, l1Block, timestamp, amount, calldataForL1) {
        return bridge_helpers_1.BridgeHelper.tryOutboxExecute({
            batchNumber: batchNumber,
            proof: proof,
            path: path,
            l2Sender: l2Sender,
            l1Dest: l1Dest,
            l2Block: l2Block,
            l1Block: l1Block,
            timestamp: timestamp,
            amount: amount,
            calldataForL1: calldataForL1,
        }, activeOutboxAddress, this.l1Bridge.l1Signer);
    };
    Bridge.prototype.tryGetProofOnce = function (batchNumber, indexInBatch) {
        return bridge_helpers_1.BridgeHelper.tryGetProofOnce(batchNumber, indexInBatch, this.l2Provider);
    };
    Bridge.prototype.tryGetProof = function (batchNumber, indexInBatch, retryDelay) {
        if (retryDelay === void 0) { retryDelay = 500; }
        return bridge_helpers_1.BridgeHelper.tryGetProof(batchNumber, indexInBatch, this.l2Provider, retryDelay);
    };
    Bridge.prototype.waitUntilOutboxEntryCreated = function (batchNumber, activeOutboxAddress) {
        return bridge_helpers_1.BridgeHelper.waitUntilOutboxEntryCreated(batchNumber, activeOutboxAddress, this.l1Bridge.l1Provider);
    };
    Bridge.prototype.waitForRetriableReceipt = function (seqNum) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, bridge_helpers_1.BridgeHelper.waitForRetriableReceipt(seqNum, this.l2Provider)];
            });
        });
    };
    Bridge.prototype.getTokenWithdrawEventData = function (destinationAddress) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, bridge_helpers_1.BridgeHelper.getTokenWithdrawEventData(destinationAddress, this.arbTokenBridge.address, this.l2Provider)];
            });
        });
    };
    Bridge.prototype.getL2ToL1EventData = function (destinationAddress) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, bridge_helpers_1.BridgeHelper.getL2ToL1EventData(destinationAddress, this.l2Provider)];
            });
        });
    };
    return Bridge;
}(l2Bridge_1.L2Bridge));
exports.Bridge = Bridge;
