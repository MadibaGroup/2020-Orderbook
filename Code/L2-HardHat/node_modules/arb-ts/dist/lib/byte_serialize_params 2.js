"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeParams = exports.argSerializerConstructor = exports.getAddressIndex = void 0;
var address_1 = require("@ethersproject/address");
var bytes_1 = require("@ethersproject/bytes");
var bignumber_1 = require("@ethersproject/bignumber");
var ArbAddressTable__factory_1 = require("./abi/factories/ArbAddressTable__factory");
var ARB_ADDRESS_TABLE_ADDRESS = '0x0000000000000000000000000000000000000066';
exports.getAddressIndex = (function () {
    var addressToIndexMemo = {};
    var arbAddressTable;
    return function (address, signerOrProvider) { return __awaiter(void 0, void 0, void 0, function () {
        var isRegistered, index;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (addressToIndexMemo[address]) {
                        return [2 /*return*/, addressToIndexMemo[address]];
                    }
                    arbAddressTable =
                        arbAddressTable ||
                            ArbAddressTable__factory_1.ArbAddressTable__factory.connect(ARB_ADDRESS_TABLE_ADDRESS, signerOrProvider);
                    return [4 /*yield*/, arbAddressTable.addressExists(address)];
                case 1:
                    isRegistered = _a.sent();
                    if (!isRegistered) return [3 /*break*/, 3];
                    return [4 /*yield*/, arbAddressTable.lookup(address)];
                case 2:
                    index = (_a.sent()).toNumber();
                    addressToIndexMemo[address] = index;
                    return [2 /*return*/, index];
                case 3: return [2 /*return*/, -1];
            }
        });
    }); };
})();
// to use:
// const mySerializeParamsFunction = argSerializerConstructor("rpcurl")
var argSerializerConstructor = function (arbProvider) {
    return function (params) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, exports.serializeParams(params, function (address) { return __awaiter(void 0, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, exports.getAddressIndex(address, arbProvider)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        });
                    }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); };
};
exports.argSerializerConstructor = argSerializerConstructor;
var isAddress = function (input) {
    return typeof input === 'string' && address_1.isAddress(input);
};
var toUint = function (val, bytes) {
    return bytes_1.hexZeroPad(bignumber_1.BigNumber.from(val).toHexString(), bytes);
};
//  outputs string suitable for formatting
var formatPrimative = function (value) {
    if (isAddress(value)) {
        return value;
    }
    else if (typeof value === 'boolean') {
        return toUint(value ? 1 : 0, 1);
    }
    else if (typeof value === 'number' ||
        +value ||
        bignumber_1.BigNumber.isBigNumber(value)) {
        return toUint(value, 32);
    }
    else {
        throw new Error('unsupported type');
    }
};
var serializeParams = function (params, addressToIndex) {
    if (addressToIndex === void 0) { addressToIndex = function () {
        return new Promise(function (exec) { return exec(-1); });
    }; }
    return __awaiter(void 0, void 0, void 0, function () {
        var formattedParams, _i, params_1, param, paramArray, indices, index;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    formattedParams = [];
                    _i = 0, params_1 = params;
                    _a.label = 1;
                case 1:
                    if (!(_i < params_1.length)) return [3 /*break*/, 9];
                    param = params_1[_i];
                    if (!Array.isArray(param)) return [3 /*break*/, 5];
                    paramArray = param;
                    formattedParams.push(toUint(paramArray.length, 1));
                    if (!isAddress(paramArray[0])) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.all(paramArray.map(function (address) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, addressToIndex(address)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }))
                        // If all addresses are registered, serialize as indices
                    ];
                case 2:
                    indices = _a.sent();
                    // If all addresses are registered, serialize as indices
                    if (indices.every(function (i) { return i > -1; })) {
                        paramArray = indices;
                        formattedParams.push(toUint(1, 1));
                        paramArray.forEach(function (value) {
                            formattedParams.push(toUint(value, 4));
                        });
                        // otherwise serialize as address
                    }
                    else {
                        formattedParams.push(toUint(0, 1));
                        paramArray.forEach(function (value) {
                            formattedParams.push(formatPrimative(value));
                        });
                    }
                    return [3 /*break*/, 4];
                case 3:
                    paramArray.forEach(function (value) {
                        formattedParams.push(formatPrimative(value));
                    });
                    _a.label = 4;
                case 4: return [3 /*break*/, 8];
                case 5:
                    if (!isAddress(param)) return [3 /*break*/, 7];
                    return [4 /*yield*/, addressToIndex(param)];
                case 6:
                    index = _a.sent();
                    if (index > -1) {
                        formattedParams.push(toUint(1, 1), toUint(index, 4));
                    }
                    else {
                        formattedParams.push(toUint(0, 1), formatPrimative(param));
                    }
                    return [3 /*break*/, 8];
                case 7:
                    formattedParams.push(formatPrimative(param));
                    _a.label = 8;
                case 8:
                    _i++;
                    return [3 /*break*/, 1];
                case 9: return [2 /*return*/, bytes_1.concat(formattedParams)];
            }
        });
    });
};
exports.serializeParams = serializeParams;
