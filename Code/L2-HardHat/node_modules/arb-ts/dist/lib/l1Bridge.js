/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.L1Bridge = void 0;
var ethers_1 = require("ethers");
var EthERC20Bridge__factory_1 = require("./abi/factories/EthERC20Bridge__factory");
var Inbox__factory_1 = require("./abi/factories/Inbox__factory");
var ERC20__factory_1 = require("./abi/factories/ERC20__factory");
var bridge_helpers_1 = require("./bridge_helpers");
ethers_1.utils.computeAddress;
var MIN_APPROVAL = ethers_1.constants.MaxUint256;
var L1Bridge = /** @class */ (function () {
    function L1Bridge(erc20BridgeAddress, l1Signer) {
        this.l1Signer = l1Signer;
        this.l1Tokens = {};
        var l1Provider = l1Signer.provider;
        if (l1Provider === undefined) {
            throw new Error('Signer must be connected to an Ethereum provider');
        }
        this.l1Provider = l1Provider;
        this.ethERC20Bridge = EthERC20Bridge__factory_1.EthERC20Bridge__factory.connect(erc20BridgeAddress, l1Signer);
        this.l1EthBalance = ethers_1.BigNumber.from(0);
    }
    L1Bridge.prototype.updateAllL1Tokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _i, l1Address;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = [];
                        for (_b in this.l1Tokens)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        l1Address = _a[_i];
                        return [4 /*yield*/, this.getAndUpdateL1TokenData(l1Address)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, this.l1Tokens];
                }
            });
        });
    };
    L1Bridge.prototype.getAndUpdateL1TokenData = function (erc20L1Address) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenData, walletAddress, indboxAddress, ethERC20TokenContract, balance, allowance, symbol, decimals, name_1, e_1, allowed, ethERC20TokenContract, balance, allowance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenData = this.l1Tokens[erc20L1Address] || {
                            ERC20: undefined,
                            CUSTOM: undefined,
                        };
                        this.l1Tokens[erc20L1Address] = tokenData;
                        return [4 /*yield*/, this.getWalletAddress()];
                    case 1:
                        walletAddress = _a.sent();
                        return [4 /*yield*/, this.getInbox()];
                    case 2:
                        indboxAddress = (_a.sent()).address;
                        if (!!tokenData.ERC20) return [3 /*break*/, 16];
                        return [4 /*yield*/, this.l1Provider.getCode(erc20L1Address)];
                    case 3:
                        if (!((_a.sent()).length > 2)) return [3 /*break*/, 14];
                        return [4 /*yield*/, ERC20__factory_1.ERC20__factory.connect(erc20L1Address, this.l1Signer)];
                    case 4:
                        ethERC20TokenContract = _a.sent();
                        return [4 /*yield*/, ethERC20TokenContract.balanceOf(walletAddress)];
                    case 5:
                        balance = _a.sent();
                        return [4 /*yield*/, ethERC20TokenContract.allowance(walletAddress, this.ethERC20Bridge.address)
                            // non-standard
                        ];
                    case 6:
                        allowance = _a.sent();
                        symbol = void 0, decimals = void 0;
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 11, , 12]);
                        return [4 /*yield*/, ethERC20TokenContract.symbol()];
                    case 8:
                        symbol = _a.sent();
                        return [4 /*yield*/, ethERC20TokenContract.decimals()];
                    case 9:
                        decimals = _a.sent();
                        return [4 /*yield*/, ethERC20TokenContract.name()];
                    case 10:
                        name_1 = _a.sent();
                        return [3 /*break*/, 12];
                    case 11:
                        e_1 = _a.sent();
                        console.info("Weird but technically standard ERC20! ah! " + erc20L1Address);
                        symbol = bridge_helpers_1.addressToSymbol(erc20L1Address);
                        decimals = 18; // ü§∑‚Äç‚ôÇÔ∏è
                        name_1 = symbol + '_Token';
                        return [3 /*break*/, 12];
                    case 12: return [4 /*yield*/, allowance.gte(MIN_APPROVAL.div(2))];
                    case 13:
                        allowed = _a.sent();
                        tokenData.ERC20 = {
                            contract: ethERC20TokenContract,
                            balance: balance,
                            allowed: allowed,
                            symbol: symbol,
                            decimals: decimals,
                            name: name_1,
                        };
                        return [3 /*break*/, 15];
                    case 14: throw new Error("No ERC20 at " + erc20L1Address + " ");
                    case 15: return [3 /*break*/, 20];
                    case 16: return [4 /*yield*/, ERC20__factory_1.ERC20__factory.connect(erc20L1Address, this.l1Signer)];
                    case 17:
                        ethERC20TokenContract = _a.sent();
                        return [4 /*yield*/, ethERC20TokenContract.balanceOf(walletAddress)];
                    case 18:
                        balance = _a.sent();
                        tokenData.ERC20.balance = balance;
                        if (!!tokenData.ERC20.allowed) return [3 /*break*/, 20];
                        return [4 /*yield*/, ethERC20TokenContract.allowance(walletAddress, this.ethERC20Bridge.address)];
                    case 19:
                        allowance = _a.sent();
                        tokenData.ERC20.allowed = allowance.gte(MIN_APPROVAL.div(2));
                        _a.label = 20;
                    case 20: 
                    // TODO: erc777? meh
                    return [2 /*return*/, tokenData];
                }
            });
        });
    };
    L1Bridge.prototype.depositETH = function (value, destinationAddress, maxGas, overrides) {
        if (maxGas === void 0) { maxGas = ethers_1.BigNumber.from(5000); }
        if (overrides === void 0) { overrides = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var address, _a, inbox;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = destinationAddress;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getWalletAddress()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        address = _a;
                        return [4 /*yield*/, this.getInbox()];
                    case 3:
                        inbox = _b.sent();
                        return [2 /*return*/, inbox.sendL1FundedContractTransaction(maxGas, ethers_1.BigNumber.from(0), address, '0x', __assign({ value: value }, overrides))];
                }
            });
        });
    };
    L1Bridge.prototype.approveToken = function (erc20L1Address, overrides) {
        if (overrides === void 0) { overrides = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAndUpdateL1TokenData(erc20L1Address)];
                    case 1:
                        tokenData = _a.sent();
                        if (!tokenData.ERC20) {
                            throw new Error("Can't approve; token " + erc20L1Address + " not found");
                        }
                        return [2 /*return*/, tokenData.ERC20.contract.approve(this.ethERC20Bridge.address, MIN_APPROVAL, overrides)];
                }
            });
        });
    };
    L1Bridge.prototype.deposit = function (erc20L1Address, amount, maxSubmissionCost, maxGas, gasPriceBid, destinationAddress, overrides) {
        if (overrides === void 0) { overrides = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var destination, _a, tokenData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = destinationAddress;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getWalletAddress()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        destination = _a;
                        return [4 /*yield*/, this.getAndUpdateL1TokenData(erc20L1Address)];
                    case 3:
                        tokenData = _b.sent();
                        if (!tokenData.ERC20) {
                            throw new Error("Can't deposit; No ERC20 at " + erc20L1Address);
                        }
                        return [2 /*return*/, this.ethERC20Bridge.deposit(erc20L1Address, destination, amount, maxSubmissionCost, maxGas, gasPriceBid, '0x', overrides)];
                }
            });
        });
    };
    L1Bridge.prototype.getWalletAddress = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.walletAddressCache) {
                            return [2 /*return*/, this.walletAddressCache];
                        }
                        _a = this;
                        return [4 /*yield*/, this.l1Signer.getAddress()];
                    case 1:
                        _a.walletAddressCache = _b.sent();
                        return [2 /*return*/, this.walletAddressCache];
                }
            });
        });
    };
    L1Bridge.prototype.getInbox = function () {
        return __awaiter(this, void 0, void 0, function () {
            var inboxAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.inboxCached) {
                            return [2 /*return*/, this.inboxCached];
                        }
                        return [4 /*yield*/, this.ethERC20Bridge.inbox()];
                    case 1:
                        inboxAddress = _a.sent();
                        this.inboxCached = Inbox__factory_1.Inbox__factory.connect(inboxAddress, this.l1Signer);
                        return [2 /*return*/, this.inboxCached];
                }
            });
        });
    };
    L1Bridge.prototype.getAndUpdateL1EthBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var bal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.l1Signer.getBalance()];
                    case 1:
                        bal = _a.sent();
                        this.l1EthBalance = bal;
                        return [2 /*return*/, bal];
                }
            });
        });
    };
    return L1Bridge;
}());
exports.L1Bridge = L1Bridge;
