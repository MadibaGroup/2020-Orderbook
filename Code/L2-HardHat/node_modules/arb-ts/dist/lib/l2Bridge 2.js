/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.L2Bridge = exports.ARB_SYS_ADDRESS = void 0;
var ethers_1 = require("ethers");
var ArbTokenBridge__factory_1 = require("./abi/factories/ArbTokenBridge__factory");
var ArbSys__factory_1 = require("./abi/factories/ArbSys__factory");
var ICustomToken__factory_1 = require("./abi/factories/ICustomToken__factory");
var StandardArbERC20__factory_1 = require("./abi/factories/StandardArbERC20__factory");
var ArbRetryableTx__factory_1 = require("./abi/factories/ArbRetryableTx__factory");
exports.ARB_SYS_ADDRESS = '0x0000000000000000000000000000000000000064';
var ARB_RETRYABLE_TX_ADDRESS = '0x000000000000000000000000000000000000006E';
var L2Bridge = /** @class */ (function () {
    function L2Bridge(arbTokenBridgeAddress, l2Signer) {
        this.l2Tokens = {};
        this.l2Signer = l2Signer;
        var l2Provider = l2Signer.provider;
        if (l2Provider === undefined) {
            throw new Error('Signer must be connected to an (Arbitrum) provider');
        }
        this.l2Provider = l2Provider;
        this.arbSys = ArbSys__factory_1.ArbSys__factory.connect(exports.ARB_SYS_ADDRESS, l2Signer);
        this.arbTokenBridge = ArbTokenBridge__factory_1.ArbTokenBridge__factory.connect(arbTokenBridgeAddress, l2Signer);
        this.arbRetryableTx = ArbRetryableTx__factory_1.ArbRetryableTx__factory.connect(ARB_RETRYABLE_TX_ADDRESS, l2Signer);
        this.l2EthBalance = ethers_1.BigNumber.from(0);
    }
    L2Bridge.prototype.withdrawETH = function (value, destinationAddress, overrides) {
        return __awaiter(this, void 0, void 0, function () {
            var address, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = destinationAddress;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getWalletAddress()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        address = _a;
                        return [2 /*return*/, this.arbSys.withdrawEth(address, __assign({ value: value }, overrides))];
                }
            });
        });
    };
    L2Bridge.prototype.getLatestBlock = function () {
        return this.l2Provider.getBlock('latest');
    };
    L2Bridge.prototype.withdrawERC20 = function (erc20l1Address, amount, destinationAddress, overrides) {
        if (overrides === void 0) { overrides = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var destination, _a, tokenData, erc20TokenData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = destinationAddress;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getWalletAddress()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        destination = _a;
                        return [4 /*yield*/, this.getAndUpdateL2TokenData(erc20l1Address)];
                    case 3:
                        tokenData = _b.sent();
                        if (!tokenData) {
                            throw new Error("Can't withdraw; token not deployed");
                        }
                        erc20TokenData = tokenData.ERC20;
                        if (!erc20TokenData) {
                            throw new Error("Can't withdraw; ArbERC20 for " + erc20l1Address + " doesn't exist");
                        }
                        return [2 /*return*/, erc20TokenData.contract.withdraw(destination, amount, overrides)];
                }
            });
        });
    };
    L2Bridge.prototype.updateAllL2Tokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _i, l1Address;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = [];
                        for (_b in this.l2Tokens)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        l1Address = _a[_i];
                        return [4 /*yield*/, this.getAndUpdateL2TokenData(l1Address)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, this.l2Tokens];
                }
            });
        });
    };
    L2Bridge.prototype.getAndUpdateL2TokenData = function (erc20L1Address) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenData, walletAddress, customTokenAddress, customTokenContract, balance, err_1, l2ERC20Address, arbERC20TokenContract, balance, arbERC20TokenContract, balance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenData = this.l2Tokens[erc20L1Address] || {
                            ERC20: undefined,
                            ERC777: undefined,
                            CUSTOM: undefined,
                        };
                        this.l2Tokens[erc20L1Address] = tokenData;
                        return [4 /*yield*/, this.getWalletAddress()
                            // handle custom L2 token:
                        ];
                    case 1:
                        walletAddress = _a.sent();
                        return [4 /*yield*/, this.arbTokenBridge.customL2Token(erc20L1Address)];
                    case 2:
                        customTokenAddress = _a.sent();
                        if (!(customTokenAddress !== ethers_1.ethers.constants.AddressZero)) return [3 /*break*/, 6];
                        customTokenContract = ICustomToken__factory_1.ICustomToken__factory.connect(customTokenAddress, this.l2Signer);
                        tokenData.CUSTOM = {
                            contract: customTokenContract,
                            balance: ethers_1.BigNumber.from(0),
                        };
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, customTokenContract.balanceOf(walletAddress)];
                    case 4:
                        balance = (_a.sent());
                        tokenData.CUSTOM.balance = balance;
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _a.sent();
                        console.warn("Could not get custom token's balance", err_1);
                        return [3 /*break*/, 6];
                    case 6: return [4 /*yield*/, this.getERC20L2Address(erc20L1Address)
                        // check if standard arb erc20:
                    ];
                    case 7:
                        l2ERC20Address = _a.sent();
                        if (!!tokenData.ERC20) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.l2Provider.getCode(l2ERC20Address)];
                    case 8:
                        if (!((_a.sent()).length > 2)) return [3 /*break*/, 11];
                        return [4 /*yield*/, StandardArbERC20__factory_1.StandardArbERC20__factory.connect(l2ERC20Address, this.l2Signer)];
                    case 9:
                        arbERC20TokenContract = _a.sent();
                        return [4 /*yield*/, arbERC20TokenContract.balanceOf(walletAddress)];
                    case 10:
                        balance = _a.sent();
                        tokenData.ERC20 = {
                            contract: arbERC20TokenContract,
                            balance: balance,
                        };
                        return [3 /*break*/, 12];
                    case 11:
                        console.info("Corresponding ArbERC20 for " + erc20L1Address + " not yet deployed (would be at " + l2ERC20Address + ")");
                        _a.label = 12;
                    case 12: return [3 /*break*/, 16];
                    case 13: return [4 /*yield*/, StandardArbERC20__factory_1.StandardArbERC20__factory.connect(l2ERC20Address, this.l2Signer)];
                    case 14:
                        arbERC20TokenContract = _a.sent();
                        return [4 /*yield*/, arbERC20TokenContract.balanceOf(walletAddress)];
                    case 15:
                        balance = _a.sent();
                        tokenData.ERC20.balance = balance;
                        _a.label = 16;
                    case 16:
                        if (tokenData.ERC20 || tokenData.CUSTOM) {
                            return [2 /*return*/, tokenData];
                        }
                        else {
                            console.warn("No L2 token for " + erc20L1Address + " found");
                            return [2 /*return*/];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    L2Bridge.prototype.getERC20L2Address = function (erc20L1Address) {
        var _a, _b;
        var address;
        if ((address = (_b = (_a = this.l2Tokens[erc20L1Address]) === null || _a === void 0 ? void 0 : _a.ERC20) === null || _b === void 0 ? void 0 : _b.contract.address)) {
            return address;
        }
        return this.arbTokenBridge.calculateL2TokenAddress(erc20L1Address);
    };
    L2Bridge.prototype.getERC20L1Address = function (erc20L2Address) {
        try {
            var arbERC20 = StandardArbERC20__factory_1.StandardArbERC20__factory.connect(erc20L2Address, this.l2Signer);
            return arbERC20.l1Address();
        }
        catch (e) {
            console.warn('Could not get L1 Address');
            return;
        }
    };
    L2Bridge.prototype.getTxnSubmissionPrice = function (dataSize) {
        return this.arbRetryableTx.getSubmissionPrice(dataSize);
    };
    L2Bridge.prototype.getWalletAddress = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.walletAddressCache) {
                            return [2 /*return*/, this.walletAddressCache];
                        }
                        _a = this;
                        return [4 /*yield*/, this.l2Signer.getAddress()];
                    case 1:
                        _a.walletAddressCache = _b.sent();
                        return [2 /*return*/, this.walletAddressCache];
                }
            });
        });
    };
    L2Bridge.prototype.getAndUpdateL2EthBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var bal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.l2Signer.getBalance()];
                    case 1:
                        bal = _a.sent();
                        this.l2EthBalance = bal;
                        return [2 /*return*/, bal];
                }
            });
        });
    };
    return L2Bridge;
}());
exports.L2Bridge = L2Bridge;
