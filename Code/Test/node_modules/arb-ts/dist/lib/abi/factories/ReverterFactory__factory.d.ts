import { Signer, BigNumberish, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { ReverterFactory, ReverterFactoryInterface } from '../ReverterFactory';
export declare class ReverterFactory__factory extends ContractFactory {
    constructor(signer?: Signer);
    deploy(mode: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ReverterFactory>;
    getDeployTransaction(mode: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): ReverterFactory;
    connect(signer: Signer): ReverterFactory__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506040516101de3803806101de8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806040516100519061007f565b80828152602001915050604051809103906000f080158015610077573d6000803e3d6000fd5b50505061008c565b610105806100d983390190565b603f8061009a6000396000f3fe6080604052600080fdfea26469706673582212202e8deca0a57baf67fa65fa539d2d401adaf787658400cf3040c7b6169b65bbb764736f6c634300060b00336080604052348015600f57600080fd5b5060405161010538038061010583398181016040526020811015603157600080fd5b81019080805190602001909291905050506000811460b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4d6f6465206e6f7420300000000000000000000000000000000000000000000081525060200191505060405180910390fd5b50603f806100c66000396000f3fe6080604052600080fdfea26469706673582212208b2b2b48d14e07cb5b82927e63706de5e6555048cc4e0623d5b515bcdbeab25564736f6c634300060b0033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): ReverterFactoryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReverterFactory;
}
